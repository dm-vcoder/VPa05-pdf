#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import pandas as pd
from pathlib import Path
import subprocess
import sys
from typing import List, Dict, Any
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import mm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors

class PDFGenerator:
    def __init__(self):
        self.data_dir = Path("data")
        self.templates_dir = Path("templates")
        self.output_dir = Path("output")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.data_dir.mkdir(exist_ok=True)
        self.templates_dir.mkdir(exist_ok=True)
        self.output_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è ReportLab
        self.styles = getSampleStyleSheet()
        self.setup_fonts()
    
    def setup_fonts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            import platform
            if platform.system() == "Windows":
                # Windows —à—Ä–∏—Ñ—Ç—ã
                font_paths = [
                    "C:/Windows/Fonts/arial.ttf",
                    "C:/Windows/Fonts/calibri.ttf",
                    "C:/Windows/Fonts/tahoma.ttf"
                ]
            else:
                # macOS/Linux —à—Ä–∏—Ñ—Ç—ã
                font_paths = [
                    "/System/Library/Fonts/Arial.ttf",
                    "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
                ]
            
            for font_path in font_paths:
                if os.path.exists(font_path):
                    try:
                        pdfmetrics.registerFont(TTFont('CustomFont', font_path))
                        self.font_name = 'CustomFont'
                        return
                    except:
                        continue
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π
            self.font_name = 'Helvetica'
        except:
            self.font_name = 'Helvetica'
    
    def get_available_files(self, directory: Path, extensions: List[str]) -> List[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏"""
        files = []
        for ext in extensions:
            files.extend(directory.glob(f"*.{ext}"))
        return sorted(files)
    
    def read_csv_file(self, file_path: Path) -> pd.DataFrame:
        """–ß–∏—Ç–∞—Ç—å CSV —Ñ–∞–π–ª"""
        try:
            return pd.read_csv(file_path, encoding='utf-8')
        except UnicodeDecodeError:
            return pd.read_csv(file_path, encoding='cp1251')
    
    def read_json_file(self, file_path: Path) -> Dict[Any, Any]:
        """–ß–∏—Ç–∞—Ç—å JSON —Ñ–∞–π–ª"""
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def read_html_template(self, file_path: Path) -> str:
        """–ß–∏—Ç–∞—Ç—å HTML —à–∞–±–ª–æ–Ω"""
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    
    def get_invoice_ids(self, data: Any) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ invoice_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if isinstance(data, pd.DataFrame):
            if 'invoice_id' in data.columns:
                return data['invoice_id'].astype(str).tolist()
            elif 'id' in data.columns:
                return data['id'].astype(str).tolist()
        elif isinstance(data, dict):
            if 'invoices' in data:
                return [str(inv.get('id', inv.get('invoice_id', ''))) for inv in data['invoices']]
            elif isinstance(data, list):
                return [str(item.get('id', item.get('invoice_id', ''))) for item in data]
        return []
    
    def get_invoice_data(self, data: Any, invoice_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞"""
        if isinstance(data, pd.DataFrame):
            if 'invoice_id' in data.columns:
                row = data[data['invoice_id'].astype(str) == invoice_id]
            else:
                row = data[data['id'].astype(str) == invoice_id]
            
            if not row.empty:
                return row.iloc[0].to_dict()
        elif isinstance(data, dict):
            if 'invoices' in data:
                for inv in data['invoices']:
                    if str(inv.get('id', inv.get('invoice_id', ''))) == invoice_id:
                        return inv
        elif isinstance(data, list):
            for item in data:
                if str(item.get('id', item.get('invoice_id', ''))) == invoice_id:
                    return item
        
        return {}
    
    def generate_pdf(self, data: Dict[str, Any], output_path: Path) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            doc = SimpleDocTemplate(str(output_path), pagesize=A4, 
                                  rightMargin=20*mm, leftMargin=20*mm, 
                                  topMargin=20*mm, bottomMargin=20*mm)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=self.styles['Heading1'],
                fontName=self.font_name,
                fontSize=24,
                spaceAfter=30,
                alignment=1,  # Center
                textColor=colors.darkblue
            )
            
            heading_style = ParagraphStyle(
                'CustomHeading',
                parent=self.styles['Heading2'],
                fontName=self.font_name,
                fontSize=16,
                spaceAfter=12,
                textColor=colors.darkblue
            )
            
            normal_style = ParagraphStyle(
                'CustomNormal',
                parent=self.styles['Normal'],
                fontName=self.font_name,
                fontSize=12,
                spaceAfter=6
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF
            story = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph("–°–ß–ï–¢-–§–ê–ö–¢–£–†–ê", title_style))
            story.append(Paragraph(f"‚Ññ {data.get('invoice_id', 'N/A')}", normal_style))
            story.append(Spacer(1, 20))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ —Å—á–µ—Ç–µ
            info_data = [
                ['–ö–ª–∏–µ–Ω—Ç:', data.get('customer_name', 'N/A')],
                ['–î–∞—Ç–∞:', data.get('date', 'N/A')],
                ['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:', data.get('invoice_id', 'N/A')]
            ]
            
            info_table = Table(info_data, colWidths=[100, 200])
            info_table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), self.font_name),
                ('FONTSIZE', (0, 0), (-1, -1), 12),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            
            story.append(info_table)
            story.append(Spacer(1, 20))
            
            # –°—É–º–º–∞
            amount_style = ParagraphStyle(
                'AmountStyle',
                parent=self.styles['Heading2'],
                fontName=self.font_name,
                fontSize=20,
                alignment=1,  # Center
                textColor=colors.darkred,
                spaceAfter=20
            )
            story.append(Paragraph(f"–°—É–º–º–∞: {data.get('amount', 'N/A')} ‚ÇΩ", amount_style))
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            story.append(Paragraph("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥:", heading_style))
            story.append(Paragraph(data.get('description', 'N/A'), normal_style))
            story.append(Spacer(1, 30))
            
            # –ü–æ–¥–ø–∏—Å—å
            story.append(Paragraph("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!", normal_style))
            story.append(Paragraph(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {data.get('date', 'N/A')}", normal_style))
            
            # –°—Ç—Ä–æ–∏–º PDF
            doc.build(story)
            print(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
            raise
    
    def open_pdf(self, pdf_path: Path) -> None:
        """–û—Ç–∫—Ä—ã—Ç—å PDF –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        try:
            if sys.platform == "win32":
                os.startfile(str(pdf_path))
            elif sys.platform == "darwin":  # macOS
                subprocess.run(["open", str(pdf_path)])
            else:  # Linux
                subprocess.run(["xdg-open", str(pdf_path)])
            print(f"üìÑ PDF –æ—Ç–∫—Ä—ã—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
    
    def show_menu(self, title: str, items: List[str]) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\n{'='*50}")
        print(f" {title}")
        print(f"{'='*50}")
        
        for i, item in enumerate(items, 1):
            print(f"{i:2d}. {item}")
        
        while True:
            try:
                choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-{len(items)}): "))
                if 1 <= choice <= len(items):
                    return choice - 1
                else:
                    print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(items)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üöÄ PDF Generator - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        data_files = self.get_available_files(self.data_dir, ['csv', 'json'])
        if not data_files:
            print("‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /data –Ω–µ –Ω–∞–π–¥–µ–Ω–æ CSV –∏–ª–∏ JSON —Ñ–∞–π–ª–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ HTML —à–∞–±–ª–æ–Ω—ã
        template_files = self.get_available_files(self.templates_dir, ['html', 'htm'])
        if not template_files:
            print("‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /templates –Ω–µ –Ω–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        data_file_names = [f.name for f in data_files]
        data_choice = self.show_menu("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö", data_file_names)
        selected_data_file = data_files[data_choice]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        template_file_names = [f.name for f in template_files]
        template_choice = self.show_menu("–î–æ—Å—Ç—É–ø–Ω—ã–µ HTML —à–∞–±–ª–æ–Ω—ã", template_file_names)
        selected_template_file = template_files[template_choice]
        
        print(f"\nüìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {selected_data_file.name}")
        print(f"üìÑ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {selected_template_file.name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\nüìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        if selected_data_file.suffix.lower() == '.csv':
            data = self.read_csv_file(selected_data_file)
        else:
            data = self.read_json_file(selected_data_file)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ invoice_id
        invoice_ids = self.get_invoice_ids(data)
        if not invoice_ids:
            print("‚ùå –í —Ñ–∞–π–ª–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ invoice_id")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã
        invoice_choice = self.show_menu("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã", invoice_ids)
        selected_invoice_id = invoice_ids[invoice_choice]
        
        print(f"\nüìã –í—ã–±—Ä–∞–Ω –∏–Ω–≤–æ–π—Å: {selected_invoice_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞
        invoice_data = self.get_invoice_data(data, selected_invoice_id)
        if not invoice_data:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ PDF
        pdf_filename = f"invoice_{selected_invoice_id}.pdf"
        pdf_path = self.output_dir / pdf_filename
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        print("üìÑ –°–æ–∑–¥–∞–µ–º PDF...")
        self.generate_pdf(invoice_data, pdf_path)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
        print("üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF...")
        self.open_pdf(pdf_path)
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_path}")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    try:
        generator = PDFGenerator()
        generator.run()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
